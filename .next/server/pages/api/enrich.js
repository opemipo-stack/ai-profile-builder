"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/enrich";
exports.ids = ["pages/api/enrich"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenrich&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenrich.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenrich&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenrich.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_enrich_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/enrich.ts */ \"(api)/./pages/api/enrich.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_enrich_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_enrich_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/enrich\",\n        pathname: \"/api/enrich\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_enrich_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmVucmljaCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGZW5yaWNoLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ2tEO0FBQ2xEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxpREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsaURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXNlci1wcm9maWxlLWVucmljaG1lbnQtYXBpLz81ZmI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZW5yaWNoLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZW5yaWNoXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZW5yaWNoXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenrich&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenrich.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/enrich.ts":
/*!*****************************!*\
  !*** ./pages/api/enrich.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// Utility function to extract username from email\nfunction extractUsernameFromEmail(email) {\n    return email.split(\"@\")[0].toLowerCase().replace(/[^a-z0-9]/g, \"\");\n}\n// Utility function to generate fallback profile image\nfunction generateFallbackImage(name) {\n    return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&size=200&background=0D8ABC&color=fff&bold=true`;\n}\n// People Data Labs enrichment\nasync function enrichWithPDL(email, name) {\n    const apiKey = process.env.PDL_API_KEY;\n    if (!apiKey) {\n        console.warn(\"PDL_API_KEY not found, skipping PDL enrichment\");\n        return {};\n    }\n    try {\n        const response = await fetch(\"https://api.peopledatalabs.com/v5/person/enrich\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Api-Key\": apiKey\n            },\n            body: JSON.stringify({\n                email: email,\n                name: name\n            })\n        });\n        if (!response.ok) {\n            console.warn(`PDL API returned ${response.status}: ${response.statusText}`);\n            return {};\n        }\n        const data = await response.json();\n        const person = data.data;\n        if (!person) {\n            console.warn(\"No person data found from PDL\");\n            return {};\n        }\n        // Extract social profiles\n        const socials = {\n            linkedin: \"\",\n            github: \"\",\n            twitter: \"\"\n        };\n        person.profiles?.forEach((profile)=>{\n            if (profile.network === \"linkedin\" && profile.url) {\n                socials.linkedin = profile.url;\n            } else if (profile.network === \"github\" && profile.url) {\n                socials.github = profile.url;\n            } else if (profile.network === \"twitter\" && profile.url) {\n                socials.twitter = profile.url;\n            }\n        });\n        // Extract skills\n        const skills = person.skills?.map((skill)=>skill.name).slice(0, 10) || [];\n        // Get most recent job info\n        const latestJob = person.experience?.[0];\n        return {\n            name: person.full_name || name,\n            headline: person.job_title || latestJob?.title || \"\",\n            company: person.job_company_name || latestJob?.company?.name || \"\",\n            location: person.location_names?.[0] || \"\",\n            bio: person.summary || \"\",\n            socials,\n            skills\n        };\n    } catch (error) {\n        console.error(\"PDL enrichment error:\", error);\n        return {};\n    }\n}\n// GitHub enrichment\nasync function enrichWithGitHub(email, name) {\n    try {\n        // Try to find GitHub user by email-derived username first\n        const username = extractUsernameFromEmail(email);\n        let githubUser = null;\n        // Try multiple approaches to find the GitHub user\n        const searchStrategies = [\n            username,\n            name.toLowerCase().replace(/\\s+/g, \"\"),\n            name.toLowerCase().replace(/\\s+/g, \"-\")\n        ];\n        for (const searchTerm of searchStrategies){\n            try {\n                const response = await fetch(`https://api.github.com/users/${searchTerm}`, {\n                    headers: process.env.GITHUB_TOKEN ? {\n                        \"Authorization\": `token ${process.env.GITHUB_TOKEN}`\n                    } : {}\n                });\n                if (response.ok) {\n                    githubUser = await response.json();\n                    break;\n                }\n            } catch (error) {\n                continue;\n            }\n        }\n        if (!githubUser) {\n            console.warn(\"No GitHub user found\");\n            return {};\n        }\n        // Get repository stats\n        let totalStars = 0;\n        try {\n            const reposResponse = await fetch(`https://api.github.com/users/${githubUser.login}/repos?per_page=100`, {\n                headers: process.env.GITHUB_TOKEN ? {\n                    \"Authorization\": `token ${process.env.GITHUB_TOKEN}`\n                } : {}\n            });\n            if (reposResponse.ok) {\n                const repos = await reposResponse.json();\n                totalStars = repos.reduce((sum, repo)=>sum + repo.stargazers_count, 0);\n            }\n        } catch (error) {\n            console.warn(\"Error fetching GitHub repos:\", error);\n        }\n        return {\n            name: githubUser.name || name,\n            bio: githubUser.bio || \"\",\n            profileImage: githubUser.avatar_url || \"\",\n            socials: {\n                github: githubUser.html_url || \"\",\n                twitter: githubUser.twitter_username ? `https://twitter.com/${githubUser.twitter_username}` : \"\",\n                linkedin: \"\"\n            },\n            githubStats: {\n                repos: githubUser.public_repos || 0,\n                stars: totalStars,\n                followers: githubUser.followers || 0\n            }\n        };\n    } catch (error) {\n        console.error(\"GitHub enrichment error:\", error);\n        return {};\n    }\n}\n// AI-powered enrichment (using OpenAI or similar)\nasync function enrichWithAI(name, email, existingData) {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n        console.warn(\"OPENAI_API_KEY not found, skipping AI enrichment\");\n        return {};\n    }\n    try {\n        const prompt = `Based on the following information about a person, generate a professional headline and bio. Keep it realistic and professional.\n\nName: ${name}\nEmail: ${email}\nCompany: ${existingData.company || \"Unknown\"}\nCurrent Role: ${existingData.headline || \"Unknown\"}\nLocation: ${existingData.location || \"Unknown\"}\nSkills: ${existingData.skills?.join(\", \") || \"Unknown\"}\n\nPlease provide:\n1. A professional headline (like \"Senior Software Engineer at TechCorp\")\n2. A 2-3 sentence professional bio\n\nFormat as JSON:\n{\n  \"headline\": \"...\",\n  \"bio\": \"...\"\n}`;\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                max_tokens: 200,\n                temperature: 0.7\n            })\n        });\n        if (!response.ok) {\n            console.warn(`OpenAI API returned ${response.status}: ${response.statusText}`);\n            return {};\n        }\n        const data = await response.json();\n        const content = data.choices?.[0]?.message?.content;\n        if (content) {\n            try {\n                const parsed = JSON.parse(content);\n                return {\n                    headline: parsed.headline || \"\",\n                    bio: parsed.bio || \"\"\n                };\n            } catch (parseError) {\n                console.warn(\"Failed to parse AI response:\", parseError);\n            }\n        }\n        return {};\n    } catch (error) {\n        console.error(\"AI enrichment error:\", error);\n        return {};\n    }\n}\n// Generate fallback data\nfunction generateFallbackData(name, email) {\n    const username = extractUsernameFromEmail(email);\n    const domain = email.split(\"@\")[1];\n    return {\n        name,\n        email,\n        headline: \"Professional\",\n        company: domain.split(\".\")[0].charAt(0).toUpperCase() + domain.split(\".\")[0].slice(1),\n        location: \"Remote\",\n        bio: `${name} is a professional with experience in technology and innovation.`,\n        profileImage: generateFallbackImage(name),\n        socials: {\n            linkedin: `https://linkedin.com/in/${username}`,\n            github: `https://github.com/${username}`,\n            twitter: `https://twitter.com/${username}`\n        },\n        skills: [\n            \"Communication\",\n            \"Problem Solving\",\n            \"Leadership\"\n        ],\n        githubStats: {\n            repos: 0,\n            stars: 0,\n            followers: 0\n        }\n    };\n}\n// Merge enrichment results\nfunction mergeEnrichmentResults(name, email, pdlData, githubData, aiData) {\n    const fallback = generateFallbackData(name, email);\n    return {\n        name: pdlData.name || githubData.name || name,\n        email,\n        headline: aiData.headline || pdlData.headline || fallback.headline,\n        company: pdlData.company || fallback.company,\n        location: pdlData.location || fallback.location,\n        bio: aiData.bio || githubData.bio || pdlData.bio || fallback.bio,\n        profileImage: githubData.profileImage || fallback.profileImage,\n        socials: {\n            linkedin: pdlData.socials?.linkedin || fallback.socials.linkedin,\n            github: githubData.socials?.github || pdlData.socials?.github || fallback.socials.github,\n            twitter: githubData.socials?.twitter || pdlData.socials?.twitter || fallback.socials.twitter\n        },\n        skills: pdlData.skills || fallback.skills,\n        githubStats: githubData.githubStats || fallback.githubStats\n    };\n}\n// Input validation\nfunction validateInput(body) {\n    if (!body || typeof body !== \"object\") {\n        return {\n            isValid: false,\n            error: \"Request body must be a JSON object\"\n        };\n    }\n    if (!body.name || typeof body.name !== \"string\" || body.name.trim().length === 0) {\n        return {\n            isValid: false,\n            error: \"Name is required and must be a non-empty string\"\n        };\n    }\n    if (!body.email || typeof body.email !== \"string\" || body.email.trim().length === 0) {\n        return {\n            isValid: false,\n            error: \"Email is required and must be a non-empty string\"\n        };\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(body.email.trim())) {\n        return {\n            isValid: false,\n            error: \"Email must be in valid format\"\n        };\n    }\n    return {\n        isValid: true\n    };\n}\nasync function handler(req, res) {\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Credentials\", true);\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,OPTIONS,PATCH,DELETE,POST,PUT\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\");\n    // Handle preflight requests\n    if (req.method === \"OPTIONS\") {\n        res.status(200).end();\n        return;\n    }\n    // Only allow POST requests\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed. Use POST.\"\n        });\n    }\n    try {\n        // Validate input\n        const validation = validateInput(req.body);\n        if (!validation.isValid) {\n            return res.status(400).json({\n                error: validation.error\n            });\n        }\n        const { name, email } = req.body;\n        const sanitizedName = name.trim();\n        const sanitizedEmail = email.trim().toLowerCase();\n        console.log(`Enriching profile for: ${sanitizedName} (${sanitizedEmail})`);\n        // Run all enrichment sources in parallel\n        const [pdlData, githubData] = await Promise.allSettled([\n            enrichWithPDL(sanitizedEmail, sanitizedName),\n            enrichWithGitHub(sanitizedEmail, sanitizedName)\n        ]);\n        // Extract results from settled promises\n        const pdlResult = pdlData.status === \"fulfilled\" ? pdlData.value : {};\n        const githubResult = githubData.status === \"fulfilled\" ? githubData.value : {};\n        // Log any errors from parallel enrichment\n        if (pdlData.status === \"rejected\") {\n            console.error(\"PDL enrichment failed:\", pdlData.reason);\n        }\n        if (githubData.status === \"rejected\") {\n            console.error(\"GitHub enrichment failed:\", githubData.reason);\n        }\n        // Run AI enrichment with existing data\n        const combinedData = {\n            ...pdlResult,\n            ...githubResult\n        };\n        const aiResult = await enrichWithAI(sanitizedName, sanitizedEmail, combinedData);\n        // Merge all results\n        const enrichedProfile = mergeEnrichmentResults(sanitizedName, sanitizedEmail, pdlResult, githubResult, aiResult);\n        console.log(`Successfully enriched profile for: ${sanitizedName}`);\n        res.status(200).json(enrichedProfile);\n    } catch (error) {\n        console.error(\"Enrichment API error:\", error);\n        res.status(500).json({\n            error: \"Internal server error during profile enrichment\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/enrich.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenrich&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenrich.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();